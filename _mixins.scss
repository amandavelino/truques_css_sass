@mixin backImage($image,
    $height: 100vh,
    $bgPos: center center
    ) {
    background: linear-gradient( to bottom,
        rgba(0,0,0,0),
        rgba(0,0,0,.6)),
        url($image);
    background-repeat: no-repeat;
    background-position: $bgPos;
    background-size: cover;
    height: $height;
}

@mixin clearfix {
    &:before,
    &:after {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin imagegrid($qty, $margin) {
    width: ((100% - (($qty - 1) * $margin))/$qty);
    &:nth-child(n) {
        margin-right: $margin;
        margin-bottom: $margin;
    }
    &:nth-child(#{$qty}n) {
        margin-right: 0;
        margin-bottom: 0;
    }
}
//**********************************************************//

@mixin break($length) {
    @media (min-width: $length) {
        //da largura x até a largura mínima de $lentgh
        //ex.: 1000px da largura x até 1000px abaixo disto já não funciona o código
        //(@content) descrito aqui....
        @content;
    }
}

//break com conditions, usar o exemplo abaixo mais completo
//$args... indica quantos argumentos passados aqui...
//se só um toma o min-width se dois toma o min-width e max-width
//$args... list em SASS

@mixin break($args...) {
    @if length($args) == 1 {
        @media (min-width: nth($args, 1)) {
            @content;
        }
    } @else {
        @media (min-width: nth($args, 1))
            and (max-width: nth($args, 2)) {
            @content;
        }
    }

}

 ul li {
        @include break(760px) {
            float: right; // = @content -> conteúdo a ser executado...
        }
        padding: 10px 5px;
    }
    
//*******************************************************
//uso de loop for

$color-headlines: $blue, $purple, $green,
    $red, $orange, $yellow;

h1,h2,h3,h4,h5,h6 {
    font-family: $font-highlight;
}

@for $item from 1 through length($color-headlines) {
    h#{$item} {
        color: nth($color-headlines, $item);
    }
}

//******************************************************
//uso de @each
//deve ter btn-deafult,btn-hot,btn-cool... no código html como classe
$color-btn-names: 'default', 'hot', 'cool';
$color-btn-values: $color-main, $red, $blue;

@each $name in $color-btn-names {
    $i: index($color-btn-names, $name);
    .btn-#{$name} {
        @extend %btn;
        background-color: nth($color-btn-values, $i);
    }
}

//**************************************************
//trabalhando com map data type (associative arrays), muito melhor que o exemplo acima...

$color-btn: (
    default: $color-main,
    hot: $red,
    cool: $blue
);

@each $key,$value in $color-btn {
    .btn-#{$key} {
        @extend %btn;
        background-color: $value;
    }
}

//mixin paa border radius

@mixin rounded ($radius: 10px) {
 
    -webkit-border-raiuds: $radius;
    border-radius: $radius;
    background-clip: padding-box;

}

//pesquisar mais em:
//sass-lang.com
//thesassway.com
